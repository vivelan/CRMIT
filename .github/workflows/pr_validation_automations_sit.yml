# Unique name for this workflow
name: Validate PR on sit branch

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is as below. This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ main ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    Run-Validation-on-sit-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v4
              with:
                node-version: '20'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            
                 
            # Now Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
                  mkdir -p ~/cli/sf
                  tar xJf sf-linux-x64.tar.xz -C ~/cli/sf --strip-components 1
                  echo "$HOME/cli/sf/bin" >> $GITHUB_PATH
                  ~/cli/sf/bin/sfdx version
            # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            # This is an awesome plugin that allows us to extract a package.xml with the metadata
            # that has changed between commits. I highly recommend going over the github readme 
            # for more information on how this works.

            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 
            # Install java as it is required for the next step
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk
            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Prior to setting up this workflow, you have to create a Github Secret
            # that contains the sfdx url of the SIT org.

            # The steps to generate the url are here 
            # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

            # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
            # the sfdx project in the repositry, against the org from which the URL
            # was generated from. This works just like that, there's no need to create
            # connected apps or any else. 

            # The URL is stored in the Github Secret named SFDX_SIT_URL
            # so here we store the URL into a text file
            - name: 'Populate auth file with SFDX_URL secret of sit org'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_SIT_URL}} > ./SFDX_SIT_URL.txt
            # Authenticate to org using the URL stored in the text file
            - name: 'Authenticate to SIT Org'
              run: sf org login sfdx-url -f ./SFDX_SIT_URL.txt -s -a dev

            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

             # Check for changes and deploy in force-app directory
            - name: 'Check-only deploy delta changes - run all tests'
              run: |
                changed_files=$(git diff --name-only --diff-filter=d HEAD~1..HEAD | grep "^force-app/" | wc -l)
                if [ $changed_files -gt 0 ]; then
                  echo "Changes detected in force-app directory."
                  sfdx project deploy start --source-dir "changed-sources/force-app" --dry-run -a 59.0  -w 1000 --json
                else
                  echo "No changes detected in force-app directory."
                fi

            # Check for changes and deploy in descriptive changes directory
            - name: 'Deploy destructive changes (if any)'
              run: |
                  sfdx project deploy start --metadata-dir "changed-sources/destructiveChanges" --dry-run -w 1000 --json

            #- name: 'Check-only deploy delta changes - run specified tests'
            #  if: ${{ env.APEX_TESTS != 'all' }}
            #  run: |
            #      echo ${{env.APEX_TESTS}}
            #      sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
            # If the env variable equals all, we run all tests
            # - name: 'Check-only deploy delta changes - run all tests'
            #   if: steps.create_delta.outputs.delta != 'No changes detected.' && env.FORCE_APP_CHANGES == 'true'
            #   run: |
            #     sfdx project deploy start --source-dir "changed-sources/force-app" --test-level RunLocalTests --dry-run -a 59.0  -w 1000 --json

            # - name: 'Deploy destructive changes (if any)'
            #   if: steps.check_descriptive_changes.outputs.descriptive_changes == 'true'
            #   run: |
            #     sfdx project deploy start --metadata-dir "changed-sources/destructiveChanges" --test-level RunLocalTests --dry-run -w 1000 --json      

          # Housekeeping           
            - name: "Clean-up local files"
              run: rm -f ./server.key
        
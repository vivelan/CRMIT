<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>NotificationCaseRegClosed</name>
        <label>NotificationCaseRegClosed</label>
        <locationX>172</locationX>
        <locationY>1105</locationY>
        <actionName>customNotificationAction</actionName>
        <actionType>customNotificationAction</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>customNotifTypeId</name>
            <value>
                <elementReference>GetCustomClosedNotificationRecord.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>recipientIds</name>
            <value>
                <elementReference>GroudMemberIds</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>title</name>
            <value>
                <elementReference>NotificationSubject</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>body</name>
            <value>
                <elementReference>NotificationBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <name>NotificationCaseRegUserCreation</name>
        <label>NotificationCaseRegUserCreation</label>
        <locationX>659</locationX>
        <locationY>1314</locationY>
        <actionName>customNotificationAction</actionName>
        <actionType>customNotificationAction</actionType>
        <connector>
            <targetReference>updateCaseOwner</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>customNotifTypeId</name>
            <value>
                <elementReference>GetCustomUserCreationNotificationRecord.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>recipientIds</name>
            <value>
                <elementReference>GroudMemberIds</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>title</name>
            <value>
                <elementReference>userCreationNotificationSubject</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>body</name>
            <value>
                <elementReference>userCreationNotificationBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <name>sendEmailonSuppliedEmail</name>
        <label>sendEmailonSuppliedEmail</label>
        <locationX>203</locationX>
        <locationY>914</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$Record.SuppliedEmail</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>$Label.RejectedMailSubject</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
    </actionCalls>
    <apiVersion>56.0</apiVersion>
    <assignments>
        <name>AddMembersIDsToCollections</name>
        <label>Add Member&apos;s IDs To Collections</label>
        <locationX>640</locationX>
        <locationY>859</locationY>
        <assignmentItems>
            <assignToReference>GroudMemberIds</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>ForEachGroupMember.UserOrGroupId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>ForEachGroupMember</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>CheckByPassCondition</name>
        <label>Check By Pass Condition</label>
        <locationX>456</locationX>
        <locationY>479</locationY>
        <defaultConnector>
            <targetReference>GetCaseRecordType</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Execute Flow</defaultConnectorLabel>
        <rules>
            <name>DontExecuteFlow</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>GetByPassFlowConfiguration.ByPassedUsers__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$User.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetByPassFlowConfiguration.ByPassedProfiles__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Profile.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>GetByPassFlowConfiguration.ByPassFlow__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Setup.ByPassLogic__c.ByPassFlow__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <label>Don&apos;t Execute Flow</label>
        </rules>
    </decisions>
    <decisions>
        <name>checkCaseStatus</name>
        <label>checkCaseStatus</label>
        <locationX>543</locationX>
        <locationY>996</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>closedStatus</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetCustomClosedNotificationRecord</targetReference>
            </connector>
            <label>closedStatus</label>
        </rules>
        <rules>
            <name>UserCreationStatus</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>User Creation</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>getQueueRecord</targetReference>
            </connector>
            <label>UserCreationStatus</label>
        </rules>
    </decisions>
    <decisions>
        <name>checkGroupMember</name>
        <label>checkGroupMember</label>
        <locationX>540</locationX>
        <locationY>745</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>GroupMemberAvailable</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>getGroupMember</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ForEachGroupMember</targetReference>
            </connector>
            <label>GroupMemberAvailable</label>
        </rules>
    </decisions>
    <decisions>
        <name>checkStatusvalue</name>
        <label>checkStatusvalue</label>
        <locationX>528</locationX>
        <locationY>608</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Rejected</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Rejected</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.SuppliedEmail</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.RecordTypeId</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>GetCaseRecordType.Id</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetCreatedByUserData</targetReference>
            </connector>
            <label>Rejected</label>
        </rules>
        <rules>
            <name>ClosedAndUserCreation</name>
            <conditionLogic>(1  OR  3) AND 2</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.RecordTypeId</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>GetCaseRecordType.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>User Creation</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>getPublicGroup</targetReference>
            </connector>
            <label>Closed And UserCreation</label>
        </rules>
    </decisions>
    <decisions>
        <name>checkUserProfile</name>
        <label>checkUserProfile</label>
        <locationX>211</locationX>
        <locationY>788</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>CustomerPortalUserProfile</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetCreatedByUserData.Profile.Name</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Dillinger myE-Service Profile</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>sendEmailonSuppliedEmail</targetReference>
            </connector>
            <label>CustomerPortalUserProfile</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <name>NotificationBody</name>
        <dataType>String</dataType>
        <expression>{!$Label.ClosedNotifyBody1} +&apos;  &apos;+ {!$Record.Contact.FirstName} +&apos;  &apos;+ {!$Record.Contact.LastName}+&apos;, &apos;+ {!$Record.Account.Name}  +&apos; &apos;+{!$Label.ClosedNotifyBody2}</expression>
    </formulas>
    <formulas>
        <name>NotificationSubject</name>
        <dataType>String</dataType>
        <expression>{!$Label.ClosedNotifySubject}</expression>
    </formulas>
    <formulas>
        <name>userCreationNotificationBody</name>
        <dataType>String</dataType>
        <expression>{!$Label.FirstName} &amp; &apos;: &apos; &amp; {!$Record.SuppliedName} &amp; SUBSTITUTE({!textLineBreak}, &quot;~&quot;, &quot; &quot;)
&amp;  {!$Label.LastName} &amp;  &apos;: &apos;  &amp; {!$Record.SuppliedLastName__c} &amp; SUBSTITUTE({!textLineBreak}, &quot;~&quot;, &quot; &quot;)
&amp;  {!$Label.EMailFlow} &amp; &apos;: &apos; &amp; {!$Record.SuppliedEmail} &amp; SUBSTITUTE({!textLineBreak}, &quot;~&quot;, &quot; &quot;)
&amp;  {!$Label.UserType} &amp; &apos;: &apos; &amp; TEXT({!$Record.UserType__c})</expression>
    </formulas>
    <formulas>
        <name>userCreationNotificationSubject</name>
        <dataType>String</dataType>
        <expression>{!$Label.UserCreationSubject}</expression>
    </formulas>
    <interviewLabel>RejectedEmailForMyEServiceRegistrationApplication {!$Flow.CurrentDateTime}</interviewLabel>
    <label>RejectedEmailForMyEServiceRegistrationApplication</label>
    <loops>
        <name>ForEachGroupMember</name>
        <label>For Each Group Member</label>
        <locationX>447</locationX>
        <locationY>870</locationY>
        <collectionReference>getGroupMember</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>AddMembersIDsToCollections</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>checkCaseStatus</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>FREE_FORM_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <name>GetByPassFlowConfiguration</name>
        <label>GetByPassFlowConfiguration</label>
        <locationX>456</locationX>
        <locationY>371</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckByPassCondition</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>RejectedEmailForMyEServiceRegistrationAp</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ByPassFlowConfiguration__mdt</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetCaseRecordType</name>
        <label>Get Case RecordType</label>
        <locationX>700</locationX>
        <locationY>478</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>checkStatusvalue</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>SobjectType</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Case</stringValue>
            </value>
        </filters>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>User registration</stringValue>
            </value>
        </filters>
        <filters>
            <field>IsActive</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>RecordType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetCreatedByUserData</name>
        <label>Get CreatedBy User Data</label>
        <locationX>276</locationX>
        <locationY>569</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>checkUserProfile</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.CreatedById</elementReference>
            </value>
        </filters>
        <filters>
            <field>IsActive</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetCustomClosedNotificationRecord</name>
        <label>Get Custom Closed Notification Record</label>
        <locationX>354</locationX>
        <locationY>1041</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>NotificationCaseRegClosed</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>NotificationCaseRegClosed</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>CustomNotificationType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetCustomUserCreationNotificationRecord</name>
        <label>Get Custom User Creation Notification Record</label>
        <locationX>441</locationX>
        <locationY>1167</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>NotificationCaseRegUserCreation</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>NotificationCaseRegUserCreation</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>CustomNotificationType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getGroupMember</name>
        <label>getGroupMember</label>
        <locationX>392</locationX>
        <locationY>677</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>checkGroupMember</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>GroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>getPublicGroup.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>GroupMember</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getPublicGroup</name>
        <label>getPublicGroup</label>
        <locationX>703</locationX>
        <locationY>665</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>getGroupMember</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>SystemAdmins</stringValue>
            </value>
        </filters>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Regular</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getQueueRecord</name>
        <label>getQueueRecord</label>
        <locationX>619</locationX>
        <locationY>1168</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GetCustomUserCreationNotificationRecord</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>SystemAdmins</stringValue>
            </value>
        </filters>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Queue</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>updateCaseOwner</name>
        <label>updateCaseOwner</label>
        <locationX>403</locationX>
        <locationY>1297</locationY>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>getQueueRecord.Id</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <start>
        <locationX>330</locationX>
        <locationY>48</locationY>
        <connector>
            <targetReference>GetByPassFlowConfiguration</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Origin</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Customer Portal</stringValue>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>IsChanged</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <object>Case</object>
        <recordTriggerType>Update</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <textTemplates>
        <name>EmailBody</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!$Label.RejectedMailBody1}&lt;/p&gt;&lt;p&gt;{!$Label.RejectedMailBody2}&lt;/p&gt;&lt;p&gt;{!$Label.RejectedMailBody3}&lt;/p&gt;&lt;p&gt;{!$Label.RejectedMailBody4}&lt;/p&gt;&lt;p&gt;{!$Label.myEServiceBody10}&lt;/p&gt;&lt;p&gt;{!$Label.myEServiceBody11}&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <name>textLineBreak</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>~
~</text>
    </textTemplates>
    <variables>
        <name>GroudMemberIds</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>ProfileId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>templateId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
